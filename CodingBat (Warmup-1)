#The parameter weekday is True if it is a weekday, and the parameter vacation is True if we are on vacation. We sleep in if it is not a weekday or we're on vacation. Return True if we sleep in.


#sleep_in(False, False) → True
#sleep_in(True, False) → False
#sleep_in(False, True) → True


weekday = 1
vacation = 0

def sleep_in(weekday, vacation):
  if not weekday or vacation:
    return True
  else:
    return False

x = sleep_in(weekday,vacation )
print(x) 

print("=======================================================================================================")

#We have two monkeys, a and b, and the parameters a_smile and b_smile indicate if each is smiling. We are in trouble if they are both smiling or if neither of them is smiling. Return True if we are in trouble.


#monkey_trouble(True, True) → True
#monkey_trouble(False, False) → True
#monkey_trouble(True, False) → False

a_smile=1
b_smile=1

def monkey_trouble(a_smile, b_smile):
  if not a_smile and not b_smile:
    return True 
  elif a_smile and b_smile:
    return True
  else:
    return False
y = monkey_trouble(a_smile,b_smile )
print(y) 

print("=======================================================================================================")

#
Given two int values, return their sum. Unless the two values are the same, then return double their sum.
#sum_double(1, 2) → 3
#sum_double(3, 2) → 5
#sum_double(2, 2) → 8


a=2
b=5
def sum_double(a, b):
  if a==b:
    return (a+b)*2
  else:
    return a+b
c=sum_double(a, b)
print(c) 

print("=======================================================================================================")

#Given an int n, return the absolute difference between n and 21, except return double the absolute difference if n is over 21.
#diff21(19) → 2
#diff21(10) → 11
#diff21(21) → 0

n=2
def diff21(n):
  if n<21:
    return 21-n
  elif n==21:
    return 0
  else:
    return (n-21)*2
d=diff21(n)
print(d)    
    
print("=======================================================================================================")

#We have a loud talking parrot. The "hour" parameter is the current hour time in the range 0..23. We are in trouble if the parrot is talking and the hour is before 7 or after 20. Return True if we are in trouble.

#parrot_trouble(True, 6) → True
#parrot_trouble(True, 7) → False
#parrot_trouble(False, 6) → False


talking=1
hour=21
def parrot_trouble(talking, hour):
  if talking and (hour<7 or hour>20):
    return True
  else:
    return False
x=parrot_trouble(talking, hour)
print(x)    

print("=======================================================================================================")

#Given 2 ints, a and b, return True if one if them is 10 or if their sum is 10.

#makes10(9, 10) → True
#makes10(9, 9) → False
#makes10(1, 9) → True

a=1
b=9
def makes10(a, b):
  if a==10 or b==10 or a+b==10:
    return True
  else:
    return False
x=makes10(a, b)
print(x)

print("=======================================================================================================")

#Given 2 int values, return True if one is negative and one is positive. Except if the parameter "negative" is True, then return True only if both are negative.

#pos_neg(1, -1, False) → True
#pos_neg(-1, 1, False) → True
#pos_neg(-4, -5, True) → True


a=-3
b=-4
negative=1
def pos_neg(a, b, negative):
  if a<0 and b>0 and negative==False:
    return True
  if a>0 and b<0 and negative==False:
    return True 
  if a<0 and b<0 and negative==True:
    return True
  if a<0 and b<0 and negative==False:
    return False
  else:
    return False
x=pos_neg(a, b, negative)
print(x)    

print("=======================================================================================================")

#Given an int n, return True if it is within 10 of 100 or 200. Note: abs(num) computes the absolute value of a number.

#near_hundred(93) → True
#near_hundred(90) → True
#near_hundred(89) → False


n=89
def near_hundred(n):
  if abs(100-n)<=10 or abs(200-n)<=10:
    return True
  else:
    return False 
x=near_hundred(n)
print(x)

print("=======================================================================================================")

#Given a string, return a new string where "not " has been added to the front. However, if the string already begins with "not", return the string unchanged.

#not_string('candy') → 'not candy'
#not_string('x') → 'not x'
#not_string('not bad') → 'not bad'

string="not bad"
def not_string(string):
  if len(string)>=3 and string[:3]=="not":
    return string
  else:
    return "not "+string
x=not_string(string)    
print(x)

print("=======================================================================================================")

#Given a non-empty string and an int n, return a new string where the char at index n has been removed. The value of n will be a valid index of a char in the original string (i.e. n will be in the range 0..len(str)-1 inclusive).

#missing_char('kitten', 1) → 'ktten'
#missing_char('kitten', 0) → 'itten'
#missing_char('kitten', 4) → 'kittn'

str="Ainazik"
n=0
def missing_char(str, n):
  front=str[:n]
  back=str[n+1:]
  return front+back
x=missing_char(str, n)
print(x)

print("=======================================================================================================")

#Given a string, return a new string where the first and last chars have been exchanged.

#front_back('code') → 'eodc'
#front_back('a') → 'a'
#front_back('ab') → 'ba'

str = "Kamaldinova"
def front_back(str):
  if len(str)<=1:
    return str
  back=str[1:-1]
  return str[-1]+ back + str[0]
print(front_back(str))

print("=======================================================================================================")

#Given a string, we'll say that the front is the first 3 chars of the string. If the string length is less than 3, the front is whatever is there. Return a new string which is 3 copies of the front.

#front3('Java') → 'JavJavJav'
#front3('Chocolate') → 'ChoChoCho'
#front3('abc') → 'abcabcabc'

def front3(str):
  if len(str)<=3:
    return str*3
  if len(str)>3:
    return str[0:3]*3
print(front3("Sana"))
